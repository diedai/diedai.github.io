---
layout:     post
title:      "web服务器"
subtitle:   " \"tomcat、jetty\""
date:       2018-11-01 06:00:00
author:     "青乡"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - web
---

# 前言
1.web服务器的各个主要模块和主要类的一一对应关系。

2.服务器和知识点串起来。


# 2个核心点
servlet  
servlet容器 //上下文，一个项目一个上下文


# 4个核心类
servlet配置  
servlet上下文  

请求  
响应





# 服务器与客户端的通信
与上面的概念一一对应关系？


# servlet接受请求和MVC的控制器接受请求

---
Servlet 的确已经能够帮我们完成所有的工作了，但是现在的 web 应用很少有直接将交互全部页面都用 servlet 来实现，而是采用更加高效的 MVC 框架来实现。这些 MVC 框架基本的原理都是将所有的请求都映射到一个 Servlet，然后去实现 service 方法，这个方法也就是 MVC 框架的入口。

---
Connector 组件
Connector 组件是 Tomcat 中两个核心组件之一，它的主要任务是负责接收浏览器的发过来的 tcp 连接请求，创建一个 Request 和 Response 对象分别用于和请求端交换数据，然后会产生一个线程来处理这个请求并把产生的 Request 和 Response 对象传给处理这个请求的线程，处理这个请求的线程就是 Container 组件要做的事了。

# 会话Session和Cookie
Cookie用的比较少，会话Session用的比较多。

#### Session
如何使用？  
1.获取会话对象  
2.写数据到会话对象里  
3.读会话对象里的数据


为什么比较多使用？

底层原理？  
服务器和客户端通过会话id。

优缺点？

#### Cookie
如何使用？

为什么比较少使用？

优缺点？

---
有了 Session ID 服务器端就可以创建 HttpSession 对象了，第一次触发是通过 request. getSession() 方法，如果当前的 Session ID 还没有对应的 HttpSession 对象那么就创建一个新的，并将这个对象加到 org.apache.catalina. Manager 的 sessions 容器中保存，Manager 类将管理所有 Session 的生命周期，Session 过期将被回收，服务器关闭，Session 将被序列化到磁盘等。只要这个 HttpSession 对象存在，用户就可以根据 Session ID 来获取到这个对象，也就达到了状态的保持。


# 设计模式
1.观察者设计模式
事件监听  

---
观察者和事件监听的关系？

2.门面设计模式
请求  
响应

3.包装器设计模式
请求  
响应

处理器Handler

# 参考
有一本介绍tomcat怎么实现的好书。


https://www.ibm.com/developerworks/cn/java/j-lo-jetty/  
https://www.ibm.com/developerworks/cn/java/j-lo-servlet/  
https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/index.html  


