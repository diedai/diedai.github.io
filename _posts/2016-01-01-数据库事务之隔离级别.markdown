---
layout:     post
title:      "数据库事务之隔离级别"
subtitle:   " \"isolation\""
date:       2016-01-01 06:00:00
author:     "青乡"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 数据库
---


# 隔离级别

#### 读未提交

1.锁

2.作用

可以读未提交的数据

3.导致的问题

脏读。因为读了未提交的数据，导致数据不一致。



#### 读已提交

1.锁

2.作用

可以读提交的数据。

3.导致的问题

数据不一致。因为读了已提交的数据，导致数据不一致。




#### 可重复读

1.锁

事务A读的时候，加了行级共享锁，事务B也可以读。

事务B写的时候，加行级排它锁，事务B不能写也不能读。



事务A操作的过程当中，一直有锁，事务B不能写，直到事务A提交事务。



2.作用

解决了数据不一致的问题。



3.导致的问题

幻读。因为可重复读的锁是行级锁，不是表级锁，如果操作的数据是表级别的，那么数据可能会不一致。




#### 可序列化

1.锁

表级锁。



2.作用

解决行级别锁存在的问题。确保了数据的一致性。



3.导致的问题

但是并发性能低。




总结

1.前面3种都有数据不一致的问题，不同情况下的数据不一致。

每一种解决的问题，也是前面一种存在的数据不一致的问题。

但是，最终还是都有可能导致数据不一致。



2.怎么解决？

第四种方法。

但是却带来了性能问题。这是一个鱼和熊掌不可兼得的问题。此消彼长。



3.所以，从上往下是越来越安全，但是并发性越来越低。






# 锁

#### 按行/表分类

1.行级锁

where id='10'; //操作某一行的数据



2.表级锁

where id in(1,10);  //操作整张表的数据





#### 按共享/排他分类

1.共享锁

不同事务都可以读数据。

更新的时候

读的时候



2.排它锁

不同事务互相排斥。

一个事务在更新数据的时候，另外一个事务既不能读更不能写。





# 提交commit

#### 区别

1.更新数据

当前sql只是暂时更新了数据库里的数据。其他sql查询数据库的时候，发现数据已经改变。



2.提交数据

永久更新数据库里的数据。这就是ACID里的duration持久性。



#### 作用

提交的作用就是永久的把数据写到数据库里。

如果没提交，只是暂时修改，因为未提交的数据可能回滚。





# 参考

http://www.hollischuang.com/archives/943

http://www.hollischuang.com/archives/900



维基百科



http://comedsh.iteye.com/blog/698733




# oracle
默认读已提交

# mysql
默认可重复读




