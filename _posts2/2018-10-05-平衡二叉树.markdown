---
layout:     post
title:      "平衡二叉树"
subtitle:   " \"Balance Binary Tree\""
date:       2018-10-05 06:00:00
author:     "青乡"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - DataStructure&Algorithm
---

# 最常用的树
二叉树。


# 二叉树

最多2个子节点。



# 二叉排序树

就是数据有序。



注：也叫二叉搜索树，但搜索两个字不能望文生义。



# 是否平衡二叉树

1.平衡

树的节点分布均匀，即左右两边的节点数量差不多。



2.不平衡

树的节点都跑一边去了，就不平衡。



什么情况会产生不平衡的树？

插入数据的时候，待插入数据有序，

1）顺序

根节点是最小的值，所以所有的节点都跑右边去了。



2）逆序

根节点是最大的值，所有的节点都跑左边去了。



# 查找数据

二分法。//速度是logN



# 查找最小值和最大值

1.最小

顺着左子节点的路径一直往下走。



2.最大

顺着右子节点的路径一直往下走。



# 插入

步骤

1.查找数据

直到为null。



2.插入数据

就是让查找到的数据(即为null)的父节点指向新的节点数据。



# 遍历

3种方法，

1.中序

步骤

1）递归调用左子节点

2）显示当前节点的数据 //3种方法的遍历都是这3个步骤，这一步(即显示当前节点的数据)在中间就叫中序遍历，在第一步就叫前序，第三步就叫后续。

3）递归调用右子节点



中序是最常用的。



2.前序



3.后续



# 删除

最难，最麻烦。



---

步骤

一、先找到要删除的节点



二、再找到要删除的节点的中序后继节点

有3种情况，

1.右子节点就是中序后继

这种情况，后继肯定是没有左子节点。所以根据是否有子右节点又分为2种情况：

1）后继没有子右节点

要删除节点的父节点指向右子节点

2）后继有子子右节点

和1）的步骤一样。所以是一样的情况。







2.右子节点的左子节点是中序后继

只要找到后继，那么后继节点肯定是没有左子节点。所以根据后继是否有右子节点又分为2种情况：

1）后继没有子右节点

和前面的一样，也是只需要一步。



2）后继有子右节点

这种情况，最麻烦。



前面介绍的后继有子右节点，指向不需要改变，之前是什么样，后面还是什么样。后继的右子节点能连接上要删除节点的右边的所有节点，所以什么都不要改变。



但是，这种情况不一样，因为后继的右子节点是不能连接上要删除节点的右边的所有节点的，后继的右子节点只能连接上后继的右子节点这颗子树，后继节点以上的节点全部就断开连接了，因为后继节点的父节点变成了要删除节点的父节点，而不是原始的父节点。



后继节点的右子节点，分以下几种情况：

1>没有子节点

第一步和前面一样，要删除节点的父节点指向后继节点； //后继节点的父节点确定了

后继节点左指针指向要删除节点的左子节点；//后继节点的左子节点确定了

后继节点右指针指向要删除节点的右子节点。//后继节点的右子节点确定了



后继节点的父节点左指针指向后继节点的右节点；//后继节点原来右子节点的父节点缺

![](http://pg60ucix6.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-08%20%E4%B8%8B%E5%8D%881.40.24.png)

经过以上几个步骤的指针指向改变，所有的节点都连接上了。

2>有子节点

a.有左子节点

和1>一样。

b.有右子节点

c.左右子节点都有



abc三种情况都一样。







三、插入中序后续节点到树，使树依然数据有序






# 速度

1.速度

1）读数据

无序数组是N。有序数组是logN。

有序树是logN。//和有序数组一样的速度，快。



2）写数据

有序数组是N。//因为要移动数据



有序树还是logN。 //改变指针指向即可。和链表一样的速度，快。





2.优点和缺点

优点

读写单个数据都很快。



缺点

读所有数据比其他数据结构都要慢，因为有递归调用。

但是树的应用场景是，假设数据库有亿以上的大数据，有读写单个数据或少部分数据，但是不会读所有数据，因为不可能同时操作所有的数据。



就算是有读所有数据的应用场景，也是在数据量很小的情况下。例如，算术表达式，或者代码编译器。


![](http://pg60ucix6.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-09%20%E4%B8%8B%E5%8D%887.46.42.png)



# 代码

1.显示数据的界面

控制台显示树。



2.各种方法的实现

# 反转二叉树







